import * as libCoverage from "istanbul-lib-coverage";
import * as reports from "istanbul-reports";
import * as fuzzer from "@jazzer.js/fuzzer";
import * as hooking from "@jazzer.js/hooking";
export interface Options {
    fuzzTarget: string;
    fuzzEntryPoint: string;
    includes: string[];
    excludes: string[];
    dryRun: boolean;
    sync: boolean;
    fuzzerOptions: string[];
    customHooks: string[];
    expectedErrors: string[];
    timeout: number;
    idSyncFile?: string;
    coverage: boolean;
    coverageDirectory: string;
    coverageReporters: reports.ReportType[];
    disableBugDetectors: string[];
}
declare global {
    var Fuzzer: fuzzer.Fuzzer;
    var HookManager: hooking.HookManager;
    var __coverage__: libCoverage.CoverageMapData;
    var options: Options;
}
export declare function initFuzzing(options: Options): Promise<void>;
export declare function registerGlobals(): void;
export declare function startFuzzing(options: Options): Promise<void>;
export declare function startFuzzingNoInit(fuzzFn: fuzzer.FuzzTarget, options: Options): Promise<void>;
/**
 * Wraps the given fuzz target function to handle errors from both the fuzz target and bug detectors.
 * Ensures that errors thrown by bug detectors have higher priority than errors in the fuzz target.
 */
export declare function wrapFuzzFunctionForBugDetection(originalFuzzFn: fuzzer.FuzzTarget): fuzzer.FuzzTarget;
export declare function ensureFilepath(filePath: string): string;
export type { Jazzer } from "./jazzer";
export { jazzer } from "./jazzer";
export { FuzzedDataProvider } from "./FuzzedDataProvider";
