import { Hook, HookFn, HookType } from "./hook";
export declare class MatchingHooksResult {
    beforeHooks: Hook[];
    replaceHooks: Hook[];
    afterHooks: Hook[];
    addHook(h: Hook): void;
    verify(): void;
    hooks(): Hook[];
    hasHooks(): boolean;
    hasBeforeHooks(): boolean;
    hasReplaceHooks(): boolean;
    hasAfterHooks(): boolean;
}
export declare class HookManager {
    private _hooks;
    registerHook(hookType: HookType, target: string, pkg: string, async: boolean, hookFn: HookFn): Hook;
    get hooks(): Hook[];
    clearHooks(): void;
    hookIndex(hook: Hook): number;
    matchingHooks(target: string, filepath: string): MatchingHooksResult;
    hasFunctionsToHook(filepath: string): boolean;
    getMatchingHooks(filepath: string): Hook[];
    callHook(id: number, thisPtr: object, params: unknown[], resultOrOriginalFunction: unknown): unknown;
}
export declare function callSiteId(...additionalArguments: unknown[]): number;
export declare const hookManager: HookManager;
export declare function registerBeforeHook(target: string, pkg: string, async: boolean, hookFn: HookFn): void;
export declare function registerReplaceHook(target: string, pkg: string, async: boolean, hookFn: HookFn): void;
export declare function registerAfterHook(target: string, pkg: string, async: boolean, hookFn: HookFn): void;
/**
 * Replaces a built-in function with a custom implementation while preserving
 * the original function for potential use within the replacement function.
 */
export declare function hookBuiltInFunction(hook: Hook): Promise<void>;
