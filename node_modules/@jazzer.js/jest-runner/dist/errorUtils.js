"use strict";
/*
 * Copyright 2022 Code Intelligence GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeBottomFrames = exports.removeBottomFramesFromError = exports.removeTopFrames = exports.removeTopFramesFromError = exports.cleanupJestRunnerStack = exports.cleanupJestError = void 0;
const cleanupJestError = (error) => {
    if (error == undefined) {
        return error;
    }
    error.stack = (0, exports.cleanupJestRunnerStack)(error.stack);
    return error;
};
exports.cleanupJestError = cleanupJestError;
const cleanupJestRunnerStack = (stack) => {
    if (!stack) {
        return stack;
    }
    let foundFirstJestRunnerFrame = false;
    const newStack = stack
        .split("\n")
        .filter((frame) => {
        if (frame.indexOf("jest-runner") != -1) {
            foundFirstJestRunnerFrame = true;
        }
        return !foundFirstJestRunnerFrame;
    })
        .join("\n");
    return stack.endsWith("\n") ? newStack + "\n" : newStack;
};
exports.cleanupJestRunnerStack = cleanupJestRunnerStack;
const removeTopFramesFromError = (error, drop) => {
    if (error == undefined) {
        return error;
    }
    error.stack = (0, exports.removeTopFrames)(error.stack, drop);
    return error;
};
exports.removeTopFramesFromError = removeTopFramesFromError;
const removeTopFrames = (stack, drop) => {
    if (!stack) {
        return stack;
    }
    const frames = stack.split("\n");
    frames.splice(1, drop);
    return frames.join("\n");
};
exports.removeTopFrames = removeTopFrames;
const removeBottomFramesFromError = (error, drop) => {
    if (error == undefined) {
        return error;
    }
    error.stack = (0, exports.removeBottomFrames)(error.stack, drop);
    return error;
};
exports.removeBottomFramesFromError = removeBottomFramesFromError;
const removeBottomFrames = (stack, drop) => {
    if (!stack) {
        return stack;
    }
    const frames = stack.split("\n");
    frames.splice(frames.length - drop - 1);
    const newStack = frames.join("\n");
    return stack.endsWith("\n") ? newStack + "\n" : newStack;
};
exports.removeBottomFrames = removeBottomFrames;
//# sourceMappingURL=errorUtils.js.map