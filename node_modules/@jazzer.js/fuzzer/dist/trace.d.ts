import { addon } from "./addon";
/**
 * Performs a string comparison between two strings and calls the corresponding native hook if needed.
 * This function replaces the original comparison expression and preserves the semantics by returning
 * the original result after calling the native hook.
 * @param s1 first compared string. s1 has the type `unknown` because we can only know the type at runtime.
 * @param s2 second compared string. s2 has the type `unknown` because we can only know the type at runtime.
 * @param operator the operator used in the comparison
 * @param id an unique identifier to distinguish between the different comparisons
 * @returns result of the comparison
 */
declare function traceStrCmp(s1: unknown, s2: unknown, operator: string, id: number): boolean;
/**
 * Performs an integer comparison between two strings and calls the corresponding native hook if needed.
 * This function replaces the original comparison expression and preserves the semantics by returning
 * the original result after calling the native hook.
 * @param n1 first compared number
 * @param n2 second compared number
 * @param operator the operator used in the comparison
 * @param id an unique identifier to distinguish between the different comparisons
 * @returns result of the comparison
 */
declare function traceNumberCmp(n1: number, n2: number, operator: string, id: number): boolean;
declare function traceAndReturn(current: unknown, target: unknown, id: number): unknown;
export interface Tracer {
    traceStrCmp: typeof traceStrCmp;
    traceUnequalStrings: typeof addon.traceUnequalStrings;
    traceStringContainment: typeof addon.traceStringContainment;
    traceNumberCmp: typeof traceNumberCmp;
    traceAndReturn: typeof traceAndReturn;
    tracePcIndir: typeof addon.tracePcIndir;
}
export declare const tracer: Tracer;
export {};
