import { CoverageTracker } from "./coverage";
import { Tracer } from "./trace";
import { addon } from "./addon";
export type { FuzzTarget, FuzzTargetAsyncOrValue, FuzzTargetCallback, } from "./addon";
export interface Fuzzer {
    coverageTracker: CoverageTracker;
    tracer: Tracer;
    startFuzzing: typeof addon.startFuzzing;
    startFuzzingAsync: typeof addon.startFuzzingAsync;
    stopFuzzingAsync: typeof addon.stopFuzzingAsync;
    stopFuzzing: typeof addon.stopFuzzing;
}
export declare const fuzzer: Fuzzer;
/**
 * Instructs the fuzzer to guide its mutations towards making `current` equal to `target`
 *
 * If the relation between the raw fuzzer input and the value of `current` is relatively
 * complex, running the fuzzer with the argument `-use_value_profile=1` may be necessary to
 * achieve equality.
 *
 * @param current a non-constant string observed during fuzz target execution
 * @param target a string that `current` should become equal to, but currently isn't
 * @param id a (probabilistically) unique identifier for this particular compare hint
 */
export declare function guideTowardsEquality(current: string, target: string, id: number): void;
/**
 * Instructs the fuzzer to guide its mutations towards making `haystack` contain `needle` as a substring.
 *
 * If the relation between the raw fuzzer input and the value of `haystack` is relatively
 * complex, running the fuzzer with the argument `-use_value_profile=1` may be necessary to
 * satisfy the substring check.
 *
 * @param needle a string that should be contained in `haystack` as a substring, but
 *     currently isn't
 * @param haystack a non-constant string observed during fuzz target execution
 * @param id a (probabilistically) unique identifier for this particular compare hint
 */
export declare function guideTowardsContainment(needle: string, haystack: string, id: number): void;
/**
 * Instructs the fuzzer to attain as many possible values for the absolute value of `state`
 * as possible.
 *
 * Call this function from a fuzz target or a hook to help the fuzzer track partial progress
 * (e.g. by passing the length of a common prefix of two lists that should become equal) or
 * explore different values of state that is not directly related to code coverage.
 *
 * Note: This hint only takes effect if the fuzzer is run with the argument
 * `-use_value_profile=1`.
 *
 * @param state a numeric encoding of a state that should be varied by the fuzzer
 * @param id a (probabilistically) unique identifier for this particular state hint
 */
export declare function exploreState(state: number, id: number): void;
export type { CoverageTracker } from "./coverage";
export type { Tracer } from "./trace";
